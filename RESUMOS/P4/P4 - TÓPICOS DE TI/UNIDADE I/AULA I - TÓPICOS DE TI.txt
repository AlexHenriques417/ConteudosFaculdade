AULA I - TÓPICOS DE TI - UNIDADE I

- TYPESCRIPT
PROGRAMAÇÃO MAIS DESENVOLVIDA QUE O JS
EVITA ERROS
MELHORA QUALIDADE DO CÓDIGO

- REVISÃO
O TS É COMPILADO PARA JS
ERROS DE TIPO PODEM SER CAPTURADOS ANTES DA EXECUÇÃO DO CÓDIGO

- PIRAMIDE
TYPE
ES6
JS

- CRIAÇÃO DE VARIÁVEIS
TIPOS PRIMITIVOS (NUMBER, STRING, BOOLEAN)
INFERÊNCIA DE TIPOS
ARRAY(TIPO[] OU ARRAY<TIPO>)
ANY
UNION TYPE -> TIPO | UNDEFINED
TIPOS LITERAIS

- OBJETOS
TYPE ALIAS E INTERFACE

- STRING
', '', `

- ESTRUTURA DE CONDIÇÃO
IF, ELSE, IF ELSE

- OPERADOR TERNÁRIO

- LOOPS
WHILE, DO WHILE E FOR

- FUNÇÕES
MODOS DIFERENTES DE DECLARAR 
TIPOS DOS PARÂMETROS
PARÂMETROS OPCIONAIS E COM VALOR PADRÃO
TIPO DO RETORNO E VOID

- ARRAYS
DESESTRUTURAÇÃO
FOR...OF
MAP, REDUCE E FILTER

- ARQUITETURA CLIENTE - SERVIDOR
CLIENTE -> IP -> DNS ( VICE VERSA )
CLIENTE -> HTTP REQUEST -> SERVER
SERVE -> HTTP RESPONSE -> CLIENTE

- FRONT E BACK END

- FRONT
HTML
CSS
JS
FRAMEWORK

- BACK
RUBY
PYTHON
JAVA
PHP
NODE.JS
GO

- JAVASCRIPT 
FRONT E BACK AO MESMO TEMPO ( FULLSTACK )
WEB
MOBILE
SMARTWARCH
TV
MICR0-CONTROLADOS
IOT

- DIVISÃO
FRONTEND - HTML, CSS E JS
BACKEND - JAVA E C#
DATABASE - SQL, POSTGRESQL E SQL SERVER

- FUNCIONAMENTO
CLIENTE -> HTTP REQUEST ( GET, POST, PUT E DELETE ) -> SERVER
SERVER -> HTTP RESPONSE ( RECEIVE JSON RESPONSE ) -> CLIENT

- HTTP
REQUEST - MÉTODO ( GET, POST, PUT, DELETE )
                  - URL ( RESOURCE )
                  - BODY ( JSON )
RESPONSE - CÓDIGO ( 200, 201, 204, 400.. )
                     - BODY ( JSON )

- CRUD
C - CREATE - CRIAR - POST
R - RAED - LER - GET
U - UPDATE - ATUALIZAR - PUT
D - DELETE - APAGAR - DELETE

- API
CLIENTE -> HTTP URL -> SERVER
SERVER -> JSON -> CLIENT

- MVC --> BASE DE DADOS
O USUÁRIO INTERAGE COM A VIEW
PROCESSO DE SOLICITAÇÃO
PEDINDI AO MODEL PARA FORNECER DADOS
SOLICITAMOS DADOS DO BD

- BASE DE DADOS --> MVC
DADOS DE RESPOSTA DO BD
RETORNANDO OS DADOS
RENDERIZANDO O CONTEUDO
O USUARIO INTERAGE COM A VIEW














