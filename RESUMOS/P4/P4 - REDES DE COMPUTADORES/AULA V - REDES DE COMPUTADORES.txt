AULA V - REDES DE COMPUTADORES

- CAMADA DE APLICAÇÃO
IMPLEMENTAÇÃO DE PROTOCOLOS
MODELOS DE SERVIÇO DE CAMADA DE TRANSPORTE
PARADIGMA PONTO A PONTO

- CRIAÇÃO DE UM APLICATIVO DE REDES
EXECUTEM EM SISTEMAS FINAIS DIFERENTES
SE COMUNICAM PELA REDES
DISPOSITIVOS DO NÚCLEO DA REDE NÃO EXECUTAM APLICATIVOS DE USUÁRIO
APLICATIVOS EXECUTANDO EM SISTEMAS FINAIS PERMITEM PROPAGAÇÃO

- SERVIDOR 
HOSPEDEIRO SEMPRE LIGADO
ENDEREÇO IP PERMANENTE
DATA CENTERS

- CLIENTES
CONTATAM E SE COMUNICAM COM O SERVIDOR
CONECTADOS DE FORMA INTERMITENTE
ENDEREÇOS DE IP DINÂMICOS
NÃO SE COMUNICA DIRETAMENTE COM OS OUTROS

- ARQUITETURA PEER-TO-PEER
NENHUM SERVIDOR LIGADO
SISTEMAS FINAIS SE COMUNICAM DIRETAMENTE
PARES SOLICITAM SERVIÇO DE OUTRO PARES
PARES ESTÃO CONECTADOS DE FORMA INTERMITENTE E MUDAM OS ENDEREÇOS IPS

- PROCESSO
PROGRAMA EXECUTANDO EM UM HOSPEDEIRO
NO MESMO HOSPEDEIRO, DOIS PROCESSOS SE COMUNICAM USANDO COMUNICAÇÃO
PROCESSOS EM DIFERENTES HOSPEDEIROS SE COMUNICAM TROCANDO MENSAGENS
PROCESSO CLIENTE - PROCESSO QUE INICIA A COMUNICAÇÃO
PROCESSO SERVIDOR - PROCESSO QUE ESPERA SER CONTATADO

- SOCKETS
PROCESSO ENVIA/ RECEBE MENSAGENS PARA SOCKET
SOCKET ANÁLOGO A PORTA

- ENDEREÇANDO PROCESSOS
PARA RECEBER MENSAGENS É PRECISO UM INDENTIFICADOR
INDENTIFICADOR INCLUI AMBOS ENDEREÇOS IP E NÚMEROS DE PORTA ASSOCIADOS COM O PROCESSO NO HOSPEDEIRO

- TIPOS DE MENSAGENS TROCADAS
REQUISIÇÃO E RESPOSTA

- SINTAXE DA MENSAGEM
QUAIS CAMPUS NAS MENSAGENS E COMO OS CAMPOS SERÃO DELINEADOS

- SEMÂNTICA DA MENSAGEM
SIGNFICADO DA INFORMAÇÃO NOS CAMPOS

- REGRAS 
SABER QUANDO E COMO OS PROCESSOS ENVIAM E RESPONDEM AS MENSAGENS

- PROTOCOLOS ABERTOS
HTTM, SMTP

- PROTOCOLOS PROPRIETÁRIOS
SKYPE E ZOOM

- INTEGRIDADE DE DADOS
APLICAÇÕES EXIGEM TRANSFERÊNCIA DE DADOS 100%

- TEMPORIZAÇÃO
APLICAÇÕES REQUEREM BAIXA LATÊNCIA PARA SEREM "EFICAZES"

- VAZÃO
APLICAÇÕES EXIGEM UMA QUANTIDADE MÍNIMA DE VAZÃO PARA SEREM "EFICAZES"

- SEGURANÇA
CRIPTOGRAFIA, INTEGRIDADE DE DADOS

- SERVIÇO TCP 

- TRANSPORTE CONFIÁVEL
PROCESSOS EMISSOR E RECEPTOR

- CONTROLE DE FLUXO
EMISSOR NÃO VAI SOBRECARREGAR O RECEPTOR

- CONTROLE DE CONGSTIONAMENTO
DESACELERA O EMISSOR QUANDO A REDE ESTÁ SOBRECARREGADA

- ORINTADA A CONEXÃO
CONFIGURAÇÃO ENTRE OS PROCESSOS CLIENTE E SERVIDOR

- NÃO OFERECE
TEMPORIZAÇÃO FARANTIA DE VAZÃO MÍNIMA E SEGURANÇA

- SERVIÇO UDP 

- TRANSFERÊNCIA DE DADOS NÃO CONFIÁVEL
ENTRE PROCESSOS EMISSOR E RECEPTOR

- NÃO OFERECE
CONFIABILIDADE, CONTROLE DE FLUXO, CONTROLE DE CONGSTIONAMENTO, TEMPORIZAÇÃO, GARANTIA DE VAZÃO OU CONFIGURAÇÃO DE CONEXÃO

- DEIXANDO O TCP SEGURO

- SOCKETS TCP E UDP TRADICIONAIS
SEM CRIPTOGRAFIA
AS SENHAS DE TEXTO NÃO CRIPTOGRAFADO

- TRANSPORT LAYER SECURITY 
FORNECE CONEXÕES TCP CRIPTOGRAFADAS
INTEGRIDADE DE DADOS
AUTENTICAÇÃO PONTO-A-PONTO

- WEB E HTTP
PÁGINA WEB CONSISTE DE ARQUIVO HTML BASE O QUAL INCLUI VÁRIOS OBJETOS REFERENCIADOS, CADA UM ENDEREÇÁVEL POR UMA URL

- VISÃO GERAL DO HTTP 

- CLIENTE
NAVEGADOR QUE SOLICITA, RECEBE E "EXIBE" OBJETOS DA WEB

- SERVIDOR
O SERVIDOR WEB ENVIA OBJETOS COM RESPOSTAS A SOLICITAÇÕES

- HTTP É "SEM ESTADO"
O SERVIDOR NÃO MANTÈM NENHUMA INFORMAÇÃO SOBRE AS SOLICITAÇÔES ANTERIORES DO CLIENTE

- HTTP USA TCP
CLIENTE INICIA CONEXÃO TCP, PORTA 80
SERVIDOR ACEITA CONEXÃO TCP DO CLIENTE
MENSAGENS HTTP TROCADAS ENTRE O NAVEGADOR E O SERVIDOR WEBCONEXÃO TCP FECHADA

- HTTP NÃO PERSISTENTE
CONEXÃO TCP ABERTA
MÁXIMO UM OBJETO ENVIADO PELA CONEXÃO TCP
CONEXÃO TCP FECHADA
( SE VÁRIOS OBJETOS FOR ENVIADA, JÁ É HTTP PERSISTENTE )

1. CLIENTE HTTP INICIA CONEXÃO TCP PARA O SERVIDOR
2. SERVIDOR HTTP NO HOSPEDEIRO ESPERANDO CONEXÕES TCP NA PORTA 80 ACEITAR A CONEXÃO
3. CLIENTE HTTP ENVIA MENSAGEM DE REQUISIÇÃO HTTP NO SOCKET DA CONEXÃO TCP
4. SERVIDOR HTTP RECEBE MENSAGEM DE REQUISIÇÃO, FORMA MENSAGEM DE RESPOSTA
5. O SERVIDOR HTTP FECHA A CONEXÃO TCP
6. CLIENTE HTTP RECEBE MENSAGEM DE RESPOSTA CONTENDO ARQUIVO HTML, EXIBE HTML
7. PASSOS 1 - 6 REPETIDOS PARA CADA UM DO 10 OBJETOS 

- RTT
TEMPO PARA UM PEQUENO PACOTE VIAJAR DO CLIENTE PARA O SERVIDOR E VOLTAR
UM RTT PARA INICIAR A CONEXÃO TCP 
UM RTT PARA ENVIAR A REQUISIÇÃO HTTP E RECEBER OS PRIMEIROS BYTES DA RESPOSTA
TEMPO DE TRANSMISSÃO DO OBJETO/ ARQUIVO

TEMPO DE RESPOSTA HTTP NÃO PERSISTENTE = 2RTT + TEMPO DE TRANSMISSÃO DO ARQUIVO

- LIMITAÇÕES DO HTTP NÃO PERSISTENTE
REQUER 2 RTTS POR OBJETO
SOBRECARREGADA DO SO PARA CADA CONEXÃO TCP
NAVEGADORES COSTUMAM ABRIR VÁRIAS CONEXÕES TCP PARALELAS PARA BUSCAR OBJETOS REFERENCIADOS EM PARALELO

- HTTP PERSISTENTE
SERVIDOR DEIXA A CONEXÃO ABERTA APÓS ENVIAR A RESPOSTA
MENSAGENS HTTP SUBEQUENTE ENTRE O MESMO CLIENTE/ SERVIDOR SÃO ENVIADAS POR MEIO DA CONEXÃO ABERTA
CLIENTE ENVIA SOLICITAÇÃO ASSIM QUE O ENCONTRA UM OBJETO REFERENCIADO

- MÉTODO POST
PÁGINA DA WEB FREQUENTEMENTE INCLUI FORMULÁRIO DE ENTRADA
ENTRADA DE USUÁRIO ENVIADA DO CLIENTE PARA O SERVIDOR NO CORPO DA ENTIDADE DA MENSAGEM DE REQUISIÇÃO

- MÉTODO GET
ENVIAR DADOS PARA O SERVIDOR
INCLUI DADOS DO USUÁRIO NO CAMPO URL DA MENSAGEM DE REQUISIÇÃO ( SEGUIDO DE UMA ? )

- MÉTODO HEAD
SOLICITA CABEÇALHOS QUE SERIAM RETORNADOS SE A URL ESPECIFICADA FOSSE SOLICITADA COM O MÉTODO 

- MÉTODO PUT 
ENVIA UM NOVO ARQUIVO ( OBJETO ) PARA O SERVIDOR
SUBSTITUI COMPLETAMENTE O ARQUIVO QUE EXISTE NA URL DO CONTEÚDO

- CÓDIGO DE STATUS DE RESPOSTA HTTP
O CÓDIGO DE STATUS APARECE NA PRIMIERA LINHA NA MENSAGEM DE RESPOSTA DO SERVIDOR PARA O CLIENTE






