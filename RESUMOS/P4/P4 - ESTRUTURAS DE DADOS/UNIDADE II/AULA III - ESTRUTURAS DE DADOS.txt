AULA III - ESTRUTURAS DE DADOS - UNIDADE II

- CRIANDO 
ESTRUTURA NO {
    INT VALOR;
    NO ESQUERDA;
    NO DIREITA;
}

COM ESSA ESTRUTURA É POSSÍVEL CRIAR UM NÓ E GERAR A ÁRVORE

- REGRAS
SE A ÁRVORE FOR VAZIA, CRIE A ÁRVORE E O PRIMEIRO NÓ
SE O VALOR A SER INSERIDO FOR MENOR DO QUE O NÓ ATUAL ELE VAI PRO FILHO DA ESQUERDA
SE O VALOR A SER INSERIDO FOR MAIOR OU IGUAL DO QUE O NÓ ATUAL ELE VAI PRO FILHO DA DIREITA

- INSERINDO NO NÓ
NO INSERE( NO N1, INT V )
    SE N1 == NULL
        NO AUX;
        AUX.VALOR = V;
        AUX.ESQUERDA = NULL;
        AUX.DIREITA = NULL;
    SENÃO SE V < N1.VALOR
        N1.ESQUERDA = INSERE( N1.ESQUERDA, V );
    SENÃO 
        N1.DIREITA = INSERE( N1.DIREITA, V );
    RETORNE N1;

- IMPRIMINDO
SE A ÁRVORE NÃO ESTIVER VAZIA...
1. IMPRIME( NÓ DA ESQUERDA )
2. IMPRIME O CONTEÚDO DO NÓ ATUAL
3. IMPRIME( NÓ DA DIREITA )

IMPRIME( NO ATUAL ) {
    SE( ATUAL!=NULL ) {
        IMPRIME( ATUAL.ESQUERDA );
        PRINT( ATUAL.VALOR );
        IMPRIME( ATUAL.DIREITA );
    }
}

- PERCURSO EM ÁRVORES BÍNARIAS DE BUSCA
FORMA SISTEMÁTICA DE VISITAR CADA NÓ DE UMA ÁRVORE EXATAMENTE 1 VEZ
HÁ SITUAÇÕES QUE SE FAZ NECESSÁRIO VISITAR TODOS OS NÓS DE UMA ÁRVORE

- MANEIRAS DE PERCORRER OS NÓS DE UMA ÁRVORE
EM LARGURA -> BUSCA EM NÍVEL
EM PROFUNDIDADE -> PRÉ-ORDEM, EM-ORDEM E PÓS-ORDEM

- BUSCA EM NÍVEL
A ÁRVORE É VISITADA DE CIMA PARA BAIXO, E DA ESQUERDA PARA A DIREITA
A AÇÃO É QUE A ÁRVORE É PERCORRIDA POR NÍVEIS
EXIGE O USO DA FILA PARA SUA CORRETA EXECUÇÃO

1. INSERIR A RAIZ NA FILA
2. ENQUANTO A FILA NÃO ESTIVER VAZIA
3. IMPRIMIR O PRIMEIRO ELEMENTO DA FILA
4. ADICIONAR O FILHO DA ESQUERDA NA FILA
5. ADICIONAR O FILHO DA DIREITA NA FILA
6. REMOVER O ELEMENTO ATUAL DA FILA

- ÁRVORES BINÁRIAS - PASSEIOS
SEGUE SEMPRE PELA ESQUERDA, DEPOIS POR BAIXO, E POR FIM PELA DIREITA, ATRAVESSANDO TODOS OS NÓS DA ÁRVORE

PASSEIOS PELA ESQUERDA -> PRÉ-ORDEM
PASSEIOS POR BAIXO -> EM-ORDEM
PASSEIOS PELA DIREITA -> PÓS-ORDEM

- IMPLEMENTAÇÕES

PASSEIOS PELA ESQUERDA -> PRÉ-ORDEM ( RAIZ, ESQUERDA, DIREITA )
PRE_ORDEM( NO ATUAL ) {
    SE( ATUAL!=NULL ) {
        PRINT( ATUAL.VALOR );
        PRE_ORDEM( ATUAL.ESQUERDA );
        PRE_ORDEM( ATUAL.DIREITA );
    }
}

PASSEIOS POR BAIXO -> EM ORDEM ( ESQUERDA, RAIZ, DIREITA )
IMPRIME( NO ATUAL ) {
    SE( ATUAL!=NULL ) {
        IMPRIME( ATUAL.ESQUERDA );
        PRINT( ATUAL.VALOR );
        IMPRIME( ATUAL.DIREITA );
    }
}

PASSEIOS PELA DIREITA -> PÓS-ORDEM ( ESQUERDA, DIREITA, RAIZ )
POS_ORDEM( NO ATUAL ) {
    SE( ATUAL!=NULL ) {
        POS_ORDEM( ATUAL.ESQUERDA );
        POS_ORDEM( ATUAL.DIREITA );
        PRINT( ATUAL.VALOR );
    }
}

- DELEÇÃO DE NÓ
DELETAR UM NÓ
TODOS OS NÓS DA SUBÁRVORE DA ESQUERDA PRECISAM TER VALORES MENORES DO QUE A RAIZ
TODOS OS NÓS DA SUBÁRVORE DA DIREITA PRECISAM TER VALORES MAIORES DO QUE A RAIZ

CASO 01 -> DELETAR ÁRVORE QUE SÓ POSSUI A RAIZ
POR SER RAIZ, É PRECISO APENAS DELETAR E A ÁRVORE FICARÁ VAZIA

CASO 02 -> DELETAR NÓ FOLHA
COMO A FOLHA NÃO TEM FILHO NEM NA ESQUERDA E NEM NA DIREITA, BASTA APENAS DELETAR

CASO 03 -> DELETAR NÓ QUE TEM 1 FILHO A ESQUERDA E/OU 1 A DIREITA
O DEV TEM 2 SOLUÇÕES POSSÍVEIS : QUANDO DELETAR O NÓ OU A FILHO DA DIREITA OU DA ESQUERDA DEVE OCUPAR O LUGAR QUE FOI TIRADO 

OBS : MESMO QUE O CÓDIGO ESTEJA PROGRAMADO PRA SEMPRE SER O FILHO DA DIREITA OU DA ESQUERDA A SUBIR SEMPRE, PRECISA LEMBRAR QUE EVENTUALMENTE PODE PRECISAR INVERTER E O OUTRO LADO SUBIR

CASO 04 -> DELETAR NÓ COM ALTURA MAIOR QUE 2
RETIRAR UM NÓ QUE PRECISA, ESCOLHER UM LADO ( ESQUERDO OU DIREITO ), E PEGAR O MAIOR NÚMERO E COLOCAR NO LUGAR DO NÓ QUE FOI TIRADO, DEPOIS O SEU FILHO, SOBRE PRA CIMA

